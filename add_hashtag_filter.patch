Index: src/twitter_api.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/twitter_api.py	(revision 20828aa831faab70cc05499e538062f9c50be893)
+++ src/twitter_api.py	(date 1629592943079)
@@ -8,15 +8,15 @@
 logger = logging.getLogger()
 
 
-def get_api(cfg: Config = None):
+def get_api(*, config: Config = None):
     auth = tweepy.OAuthHandler(
-        cfg.API_KEY if cfg else os.getenv('API_KEY'),
-        cfg.API_SECRET_KEY if cfg else os.getenv('API_SECRET_KEY')
+        config.API_KEY if config else os.getenv('API_KEY'),
+        config.API_SECRET_KEY if config else os.getenv('API_SECRET_KEY')
     )
 
     auth.set_access_token(
-        cfg.ACCESS_TOKEN if cfg else os.getenv('ACCESS_TOKEN'),
-        cfg.ACCESS_TOKEN_SECRET if cfg else os.getenv('ACCESS_TOKEN_SECRET')
+        config.ACCESS_TOKEN if config else os.getenv('ACCESS_TOKEN'),
+        config.ACCESS_TOKEN_SECRET if config else os.getenv('ACCESS_TOKEN_SECRET')
     )
 
     api = tweepy.API(
@@ -35,6 +35,7 @@
 
 
 def query_tweets(
+        *,
         api: tweepy.API,
         query: str,
         lang: str = 'en',
@@ -66,7 +67,8 @@
 
 
 if __name__ == '__main__':
-    test_api = get_api()
+    cfg = Config()
+    test_api = get_api(config=cfg)
 
     # Get user data
     user = test_api.get_user('ninja')
@@ -87,8 +89,8 @@
 
     # Query random data
     tweets = query_tweets(
-        test_api,
-        '#gamedev',
+        api=test_api,
+        query='#gamedev',
         lang='es',
         count=10,
         result_type='mixed'
Index: src/stream_listener.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/stream_listener.py	(revision 20828aa831faab70cc05499e538062f9c50be893)
+++ src/stream_listener.py	(date 1629593004269)
@@ -35,6 +35,6 @@
 
 if __name__ == '__main__':
     cfg = Config()
-    test_api = get_api(cfg)
+    test_api = get_api(config=cfg)
     test_listener = StreamListener(test_api)
     test_listener.stream_tweets_from_keywords(['Python', 'Tweepy'])
Index: src/retweet_stream_listener.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/retweet_stream_listener.py	(revision 20828aa831faab70cc05499e538062f9c50be893)
+++ src/retweet_stream_listener.py	(date 1629595208137)
@@ -3,6 +3,7 @@
 from config import Config
 from src.stream_listener import StreamListener
 from src.twitter_api import get_api
+import hashtag_filter
 
 logging.basicConfig(level=logging.INFO)
 logger = logging.getLogger()
@@ -22,6 +23,18 @@
         except:
             pass
 
+        # Filter out bad hashtags
+        try:
+            # Some tweets contain data in the form of an "extended tweet"
+            # source: https://docs.tweepy.org/en/stable/extended_tweets.html
+            et = tweet.extended_tweet
+            if hashtag_filter.tweet_contains_blocked_hashtag(et["entities"]["hashtags"]):
+                return False
+        except:
+            # Tweet is compatibility mode, extract data in another way
+            if hashtag_filter.tweet_contains_blocked_hashtag(tweet.entities["hashtags"]):
+                return False
+
         # Ignore tweet if it's a quote retweet
         if tweet.is_quote_status:
             logger.info(f'Skipping tweet: {tweet.id} (quoted status)')
@@ -51,6 +64,6 @@
 
 if __name__ == '__main__':
     cfg = Config()
-    test_api = get_api(cfg)
+    test_api = get_api(config=cfg)
     test_stream_listener = RetweetStreamListener(test_api)
     test_stream_listener.stream_tweets_from_keywords(['Python', 'JavaScript', 'OSS'])
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- main.py	(revision 20828aa831faab70cc05499e538062f9c50be893)
+++ main.py	(date 1629592943089)
@@ -13,6 +13,7 @@
 
     languages = ['es']
 
-    api = twitter_api.get_api()
+    cfg = Config()
+    api = twitter_api.get_api(config=cfg)
     stream_listener = retweet_stream_listener.RetweetStreamListener(api)
     stream_listener.stream_tweets_from_keywords(keywords, languages)
Index: hashtag_filter.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- hashtag_filter.py	(date 1629595075542)
+++ hashtag_filter.py	(date 1629595075542)
@@ -0,0 +1,17 @@
+import typing
+
+_hashtag_block_list: typing.List[str] = [
+    "NFT"
+]
+
+
+def tweet_contains_blocked_hashtag(hashtags: typing.List[typing.Dict[str, str]]) -> bool:
+    """
+    We want to block any tweet that contains a remote hashtag match with any of our items inside the blocklist
+    If our tweet contains the hashtag "NFT", we 1-1 match it against our item "NFT"
+    If it has "NFT1", it also needs to be blocked because it matches "NFT"
+    If it only contains an "N", we do not watch to block it because that doesn't match "NFT"
+    """
+    _hashtag_list: typing.List[str] = [hashtag["text"].upper() for hashtag in hashtags]
+
+    return any(h for h in _hashtag_list if any(bh in h for bh in _hashtag_block_list))
